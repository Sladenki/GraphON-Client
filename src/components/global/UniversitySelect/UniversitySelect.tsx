import { useState, ChangeEvent } from 'react';
import { useRouter } from 'next/navigation';
import { useAuth } from '@/providers/AuthProvider';
import { UserService } from '@/services/user.service';
import { useSetSelectedGraphId } from '@/stores/useUIStore';
import styles from './UniversitySelect.module.scss';

interface University {
  name: string;
  graphId: string;
}

const universities: University[] = [
  {
    name: '–ö–ì–¢–£',
    graphId: '67a499dd08ac3c0df94d6ab7'
  },
  {
    name: '–ö–ë–ö',
    graphId: '6896447465255a1c4ed48eaf'
  },
];

export const UniversitySelect: React.FC = () => {
  const { user, setUser } = useAuth();
  const router = useRouter();
  const setSelectedGraphId = useSetSelectedGraphId();
  const [selectedUniversity, setSelectedUniversity] = useState<string>('');
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleUniversityChange = (e: ChangeEvent<HTMLSelectElement>) => {
    setSelectedUniversity(e.target.value);
  };

  const handleSubmit = async () => {
    if (!selectedUniversity || isSubmitting) return;
    
    setIsSubmitting(true);
    
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ Zustand store (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ localStorage)
      setSelectedGraphId(selectedUniversity);

      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      if (user) {
        await UserService.updateSelectedGraph(selectedUniversity);
        setUser({ ...user, selectedGraphId: selectedUniversity });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      setTimeout(() => {
        router.refresh();
      }, 100);
    } catch (error) {
      console.error('Error updating selected graph:', error);
      setIsSubmitting(false);
    }
  };

  return (
    <div className={styles.container}>
      <h2 className={styles.title}>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GraphON!</h2>
      
      <div className={styles.description}>
        <p className={styles.lead}>
          –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å
        </p>
        <ul className={styles.benefits}>
          <li>üìö –î–æ—Å—Ç—É–ø –∫ —É—á–µ–±–Ω—ã–º –≥—Ä—É–ø–ø–∞–º –≤–∞—à–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞</li>
          <li>üìÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —Å–æ–±—ã—Ç–∏—è</li>
          <li>‚è∞ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</li>
        </ul>
      </div>

      <div className={styles.selectWrapper}>
        <label htmlFor="university-select" className={styles.label}>
          –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç
        </label>
        <select
          id="university-select"
          className={styles.select}
          value={selectedUniversity}
          onChange={handleUniversityChange}
        >
          <option value="" disabled>–í—ã–±–µ—Ä–∏—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç</option>
          {universities.map(uni => (
            <option key={uni.graphId} value={uni.graphId}>
              {uni.name}
            </option>
          ))}
        </select>
      </div>

      <button 
        className={styles.submitButton}
        onClick={handleSubmit}
        disabled={!selectedUniversity || isSubmitting}
      >
        {isSubmitting ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'}
      </button>
    </div>
  );
}; 