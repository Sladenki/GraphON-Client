'use client';

import React, { useState } from 'react';
import { format, startOfWeek, addDays, parseISO, isSameDay, startOfDay } from 'date-fns';
import { ru } from 'date-fns/locale';
import styles from './ScheduleList.module.scss';
import { ScheduleItem, EventItem } from '../../../types/schedule';
import { EmptyState } from '@/components/global/EmptyState/EmptyState';


interface ScheduleListProps {
  schedule: ScheduleItem[];
  events: EventItem[];
  onToggleSubscription?: (eventId: string, isAttended: boolean) => void;
}

export const ScheduleList: React.FC<ScheduleListProps> = ({ 
  schedule, 
  events, 
  onToggleSubscription 
}) => {
  const [localEvents, setLocalEvents] = useState(events);

  const handleToggleSubscription = (eventId: string, currentStatus: boolean) => {
    // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
    setLocalEvents(prev => 
      prev.map(event => 
        event._id === eventId 
          ? { 
              ...event, 
              isAttended: !currentStatus,
              regedUsers: currentStatus ? event.regedUsers - 1 : event.regedUsers + 1
            }
          : event
      )
    );

    // –í—ã–∑–æ–≤ callback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    if (onToggleSubscription) {
      onToggleSubscription(eventId, !currentStatus);
    }
  };

  if ((!schedule || schedule.length === 0) && (!localEvents || localEvents.length === 0)) {
    return (
      <EmptyState
        message="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ"
        subMessage="–ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π. –°–ª–µ–¥–∏ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∏ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–π –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è!"
        emoji="üìö"
      />
    );
  }

  const weekStart = startOfWeek(new Date(), { weekStartsOn: 1 });
  const daysOfWeek = Array.from({ length: 7 }, (_, i) => addDays(weekStart, i));

  return (
    <div className={styles.ScheduleList}>
      <div className={styles.scheduleGrid}>
        {daysOfWeek.map((date, index) => (
          <React.Fragment key={index}>
            {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏ */}
            <div className={styles.dayColumn}>
              <span className={styles.dayName}>{format(date, 'EEEE', { locale: ru })}</span>
              <span className={styles.dayDate}>{format(date, 'dd MMM', { locale: ru })}</span>
            </div>

            {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –∑–∞–Ω—è—Ç–∏—è–º–∏ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ */}
            <div className={styles.eventContainer}>
              {/* –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ */}
              {schedule
                .filter((item: ScheduleItem) => item.dayOfWeek === index)
                .map((item: ScheduleItem) => (
                  <div key={item._id} className={styles.scheduleItem}>
                    <span className={styles.itemTitle}>{item.name}</span>
                    <span className={styles.itemDescription}>
                      {item.type === 'lecture' ? 'üìñ –õ–µ–∫—Ü–∏—è' : 'üõ† –ü—Ä–∞–∫—Ç–∏–∫–∞'} ‚Ä¢ –ê—É–¥. {item.roomNumber}
                    </span>
                    <span className={styles.itemTime}>‚è∞ {item.timeFrom} - {item.timeTo}</span>
                  </div>
                ))}

              {/* –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è */}
              {localEvents
                .filter((event: EventItem) => 
                  isSameDay(startOfDay(parseISO(event.eventDate)), startOfDay(date))
                )
                .map((event: EventItem) => (
                  <div key={event._id} className={styles.eventItem}>
                    <div className={styles.eventHeader}>
                      <span className={styles.itemTitle}>üìù {event.name}</span>
                      {event.graphId && (
                        <span className={styles.graphName}>{event.graphId.name}</span>
                      )}
                    </div>
                    <span className={styles.itemDescription}>{event.description}</span>
                    <span className={styles.itemDescription}>üìç {event.place}</span>
                    <span className={styles.itemTime}>‚è∞ {event.timeFrom} - {event.timeTo}</span>
                    
                    <div className={styles.eventActions}>
                      <span className={styles.registeredCount}>
                        üë• {event.regedUsers} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                      </span>
                      <button
                        className={`${styles.subscriptionButton} ${
                          event.isAttended ? styles.subscribed : styles.unsubscribed
                        }`}
                        onClick={() => handleToggleSubscription(event._id, event.isAttended)}
                      >
                        {event.isAttended ? '‚úì –£—á–∞—Å—Ç–≤—É—é' : '+ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'}
                      </button>
                    </div>
                  </div>
                ))}
            </div>
          </React.Fragment>
        ))}
      </div>
    </div>
  );
};
