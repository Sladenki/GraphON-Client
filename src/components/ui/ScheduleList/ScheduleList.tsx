'use client';

import React from 'react';
import { format, startOfWeek, addDays, parseISO, isSameDay, startOfDay } from 'date-fns';
import { ru } from 'date-fns/locale';
import styles from './ScheduleList.module.scss';
import { EventItem, ScheduleItem } from '@/types/schedule.interface';


interface ScheduleCalendarProps {
  schedule: ScheduleItem[];
  events: EventItem[];
}

const ScheduleCalendar: React.FC<ScheduleCalendarProps> = ({ schedule, events }) => {
  const weekStart = startOfWeek(new Date(), { weekStartsOn: 1 });
  const daysOfWeek = Array.from({ length: 7 }, (_, i) => addDays(weekStart, i));

  return (
    <div className={styles.ScheduleList}>
      <h2>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é</h2>

      <div className={styles.scheduleGrid}>
        {daysOfWeek.map((date, index) => (
          <React.Fragment key={index}>
            {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏ */}
            <div className={styles.dayColumn}>
              <span className={styles.dayName}>{format(date, 'EEEE', { locale: ru })}</span>
              <span className={styles.dayDate}>{format(date, 'dd MMM', { locale: ru })}</span>
            </div>

            {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ —Å –∑–∞–Ω—è—Ç–∏—è–º–∏ –∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ */}
            <div className={styles.eventContainer}>
              {/* –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ */}
              {schedule
                .filter((item) => item.dayOfWeek === index)
                .map((item) => (
                  <div key={item._id} className={styles.scheduleItem}>
                    <span className={styles.itemTitle}>{item.name}</span>
                    <span className={styles.itemDescription}>
                      {item.type === 'lecture' ? 'üìñ –õ–µ–∫—Ü–∏—è' : 'üõ† –ü—Ä–∞–∫—Ç–∏–∫–∞'} ‚Ä¢ –ê—É–¥. {item.roomNumber}
                    </span>
                    <span className={styles.itemTime}>‚è∞ {item.timeFrom} - {item.timeTo}</span>
                  </div>
                ))}

              {/* –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è */}
              {events
                .filter((event) => isSameDay(startOfDay(parseISO(event.eventDate)), startOfDay(date)))
                .map((event) => (
                  <div key={event._id} className={styles.eventItem}>
                    <span className={styles.itemTitle}>üìù {event.name}</span>
                    <span className={styles.itemDescription}>{event.description}</span>
                    <span className={styles.itemTime}>‚è∞ {event.timeFrom} - {event.timeTo}</span>
                  </div>
                ))}
            </div>
          </React.Fragment>
        ))}
      </div>
    </div>
  );
};

export default ScheduleCalendar;
