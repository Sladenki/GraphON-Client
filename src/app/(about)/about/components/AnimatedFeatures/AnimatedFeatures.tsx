'use client';

import { motion } from 'framer-motion';
import { useInView } from 'framer-motion';
import { useRef } from 'react';
import { ParallaxSection } from '../ParallaxSection/ParallaxSection';
import styles from './AnimatedFeatures.module.scss';

const features = [
  {
    icon: 'üöÄ',
    title: '–ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å',
    description: '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–º—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã',
    color: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
  },
  {
    icon: 'üé®',
    title: '–ö—Ä–∞—Å–∏–≤–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è',
    description: '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ 3D –≥—Ä–∞—Ñ—ã —Å –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º',
    color: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)'
  },
  {
    icon: 'üîí',
    title: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö',
    description: '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è',
    color: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)'
  },
  {
    icon: 'üì±',
    title: '–ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è',
    description: '–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö',
    color: 'linear-gradient(135deg, #43e97b 0%, #38f9d7 100%)'
  },
  {
    icon: 'ü§ù',
    title: '–°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
    description: '–†–∞–±–æ—Ç–∞–π—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
    color: 'linear-gradient(135deg, #fa709a 0%, #fee140 100%)'
  },
  {
    icon: 'üìä',
    title: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
    description: '–ü–æ–ª—É—á–∞–π—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –æ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö',
    color: 'linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)'
  }
];

export const AnimatedFeatures = () => {
  const containerRef = useRef<HTMLDivElement>(null);
  const isInView = useInView(containerRef, { once: true, margin: '-100px' });

  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2,
        delayChildren: 0.1
      }
    }
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 50, scale: 0.9 },
    visible: {
      opacity: 1,
      y: 0,
      scale: 1,
      transition: {
        duration: 0.6,
        ease: 'easeOut'
      }
    }
  };

  return (
    <section className={styles.featuresSection}>
      <ParallaxSection speed={0.2}>
        <div className={styles.container} ref={containerRef}>
          <motion.div
            className={styles.header}
            initial={{ opacity: 0, y: 30 }}
            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 30 }}
            transition={{ duration: 0.8 }}
          >
            <h2 className={styles.title}>
              <span className={styles.gradientText}>–ü–æ—á–µ–º—É GraphON?</span>
            </h2>
            <p className={styles.subtitle}>
              –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            </p>
          </motion.div>

          <motion.div
            className={styles.featuresGrid}
            variants={containerVariants}
            initial="hidden"
            animate={isInView ? 'visible' : 'hidden'}
          >
            {features.map((feature, index) => (
              <motion.div
                key={index}
                className={styles.featureCard}
                variants={itemVariants}
                whileHover={{ 
                  scale: 1.05,
                  y: -10,
                  transition: { duration: 0.3 }
                }}
                whileTap={{ scale: 0.95 }}
              >
                <div 
                  className={styles.iconContainer}
                  style={{ background: feature.color }}
                >
                  <span className={styles.icon}>{feature.icon}</span>
                </div>
                <h3 className={styles.featureTitle}>{feature.title}</h3>
                <p className={styles.featureDescription}>{feature.description}</p>
                
                <motion.div
                  className={styles.hoverEffect}
                  initial={{ opacity: 0, scale: 0.8 }}
                  whileHover={{ opacity: 1, scale: 1 }}
                  transition={{ duration: 0.3 }}
                />
              </motion.div>
            ))}
          </motion.div>

          <motion.div
            className={styles.statsContainer}
            initial={{ opacity: 0, y: 50 }}
            animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
            transition={{ duration: 0.8, delay: 0.5 }}
          >
            <div className={styles.stat}>
              <div className={styles.statNumber}>10K+</div>
              <div className={styles.statLabel}>–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
            </div>
            <div className={styles.stat}>
              <div className={styles.statNumber}>99.9%</div>
              <div className={styles.statLabel}>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</div>
            </div>
            <div className={styles.stat}>
              <div className={styles.statNumber}>50M+</div>
              <div className={styles.statLabel}>–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤</div>
            </div>
          </motion.div>
        </div>
      </ParallaxSection>
    </section>
  );
}; 