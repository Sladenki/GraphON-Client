'use client'

import React, { useState, useCallback, useMemo } from 'react'
import { SpinnerLoader } from '@/components/global/SpinnerLoader/SpinnerLoader'
import { EmptyState } from '@/components/global/EmptyState/EmptyState'
import { ErrorState } from '@/components/global/ErrorState/ErrorState'
import EventCard from '@/components/ui/EventCard/EventCard'
import { useQueryWithRetry } from '@/hooks/useQueryWithRetry'
import { useDebounce } from '@/hooks/useDebounce'
import { useSearchQuery, useSelectedGraphId, useSetSearchQuery } from '@/stores/useUIStore'
import { EventService } from '@/services/event.service'
import { EventItem } from '@/types/schedule.interface'
import styles from './EventsList.module.scss'
import SearchBar, { SearchTag } from '@/components/ui/SearchBar/SearchBar'

export default function EventsList() {
  const searchQuery = useSearchQuery()
  const selectedGraphId = useSelectedGraphId()
  const setSearchQuery = useSetSearchQuery()
  const debouncedSearchQuery = useDebounce(searchQuery, 300)
  const [selectedTagIds, setSelectedTagIds] = useState<string[]>([])
  const [dateFrom, setDateFrom] = useState<string>('')
  const [dateTo, setDateTo] = useState<string>('')
  const [includeTbd, setIncludeTbd] = useState<boolean>(true)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const { 
    data: allEvents, 
    isLoading, 
    isSuccess, 
    error,
    handleRetry,
    handleOptimisticUpdate
  } = useQueryWithRetry({
    queryKey: ['eventsList', selectedGraphId],
    queryFn: async () => {
      if (!selectedGraphId) {
        return { data: [] }
      }
      return await EventService.getUpcomingEvents(selectedGraphId)
    },
    enabled: !!selectedGraphId,
    gcTime: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    staleTime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
  })

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
  const events = useMemo(() => allEvents?.data || [], [allEvents?.data])

  // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º graphId –∏ parentGraphId (–µ—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç)
  const availableTags: SearchTag[] = useMemo(() => {
    const map = new Map<string, SearchTag>()
    events.forEach((ev: any) => {
      if (ev?.graphId?._id && ev?.graphId?.name) {
        map.set(ev.graphId._id, { _id: ev.graphId._id, name: ev.graphId.name })
      }
      const parent = ev?.graphId?.parentGraphId
      if (parent?._id && parent?.name) {
        map.set(parent._id, { _id: parent._id, name: parent.name })
      }
    })
    return Array.from(map.values()).sort((a, b) => a.name.localeCompare(b.name))
  }, [events])

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π: —Ç–µ–∫—Å—Ç + —Ç–µ–≥–∏ + –¥–∞—Ç—ã
  const filteredEvents = useMemo(() => {
    let result: any[] = [...events]

    const query = debouncedSearchQuery.toLowerCase().trim()
    if (query) {
      result = result.filter((ev: EventItem | any) => {
        const fields: string[] = [ev?.name, ev?.description, ev?.place, ev?.graphId?.name].filter(Boolean)
        return fields.some((v) => String(v).toLowerCase().includes(query))
      })
    }

    if (selectedTagIds.length > 0) {
      result = result.filter((ev: any) => {
        const gid = ev?.graphId?._id
        const pid = ev?.graphId?.parentGraphId?._id
        return (gid && selectedTagIds.includes(gid)) || (pid && selectedTagIds.includes(pid))
      })
    }

    const hasDateFrom = Boolean(dateFrom)
    const hasDateTo = Boolean(dateTo)
    if (hasDateFrom || hasDateTo) {
      result = result.filter((ev: any) => {
        const isTbd = Boolean(ev?.isDateTbd)
        const dateStr: string | null = ev?.eventDate ?? null
        if (!dateStr) {
          return includeTbd && isTbd
        }
        const evDate = new Date(dateStr)
        if (Number.isNaN(evDate.getTime())) {
          return includeTbd && isTbd
        }
        if (hasDateFrom) {
          const from = new Date(dateFrom)
          if (evDate < from) return false
        }
        if (hasDateTo) {
          const to = new Date(dateTo)
          // –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
          const toEnd = new Date(to)
          toEnd.setHours(23, 59, 59, 999)
          if (evDate > toEnd) return false
        }
        return true
      })
    }

    return result
  }, [events, debouncedSearchQuery, selectedTagIds, dateFrom, dateTo, includeTbd])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
  const handleDelete = useCallback((eventId: string) => {
    handleOptimisticUpdate((old: any) => {
      if (!old?.data) return old
      
      return {
        ...old,
        data: old.data.filter((event: EventItem) => event._id !== eventId)
      }
    })
  }, [handleOptimisticUpdate])

  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const hasError = !!error
  const isEmpty = events.length === 0 && !isLoading
  const noSearchResults = filteredEvents.length === 0 && !isLoading

  // –†–µ–Ω–¥–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
  if (hasError) {
    return (
      <ErrorState
        message="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
        subMessage="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
        onRetry={handleRetry}
      />
    )
  }

  if (isEmpty) {
    return (
      <EmptyState
        message="–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
        subMessage="–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è"
        emoji="üìÖ"
      />
    )
  }

  if (noSearchResults) {
    return (
      <EmptyState
        message="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        subMessage="–ò–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç, –¥–∞—Ç—ã –∏–ª–∏ —Ç–µ–≥–∏"
        emoji="üîç"
      />
    )
  }

  return (
    <div className={styles.container}>
      {/* –ü–∞–Ω–µ–ª—å –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
      <div className={styles.filters}>
        <SearchBar
          placeholder="–ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π..."
          onSearch={setSearchQuery}
          onTagFilter={setSelectedTagIds}
          availableTags={availableTags}
          initialQuery={searchQuery}
          showDateFilter
          dateFrom={dateFrom}
          dateTo={dateTo}
          includeTbd={includeTbd}
          onDateFromChange={setDateFrom}
          onDateToChange={setDateTo}
          onIncludeTbdChange={setIncludeTbd}
        />
      </div>
      {/* –ó–∞–≥—Ä—É–∑–∫–∞ */}
      {isLoading && (
        <div className={styles.loader}>
          <SpinnerLoader />
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π */}
      {isSuccess && (
        <div className={styles.eventsList}>
          {filteredEvents.map((event: EventItem, index: number) => (
            <div 
              key={event._id} 
              className={styles.eventCard}
              style={{ 
                '--delay': `${Math.min(index * 0.05, 0.5)}s`
              } as React.CSSProperties}
            >
              <EventCard 
                event={event} 
                isAttended={event.isAttended} 
                onDelete={handleDelete}
              />
            </div>
          ))}
        </div>
      )}
    </div>
  )
}
