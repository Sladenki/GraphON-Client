'use client'

import React, { useState, useCallback, useMemo } from 'react'
import { SpinnerLoader } from '@/components/global/SpinnerLoader/SpinnerLoader'
import { EmptyState } from '@/components/global/EmptyState/EmptyState'
import EventCard from '@/components/ui/EventCard/EventCard'
import { AdBanner } from '@/components/ads/banner'
import { useQueryWithRetry } from '@/hooks/useQueryWithRetry'
import { useDebounce } from '@/hooks/useDebounce'
import { useSearchQuery, useSelectedGraphId } from '@/stores/useUIStore'
import { EventService } from '@/services/event.service'
import { EventItem } from '@/types/schedule.interface'
import styles from './EventsList.module.scss'

export default function EventsList() {
  const searchQuery = useSearchQuery()
  const selectedGraphId = useSelectedGraphId()
  const debouncedSearchQuery = useDebounce(searchQuery, 300)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const { 
    data: allEvents, 
    isLoading, 
    isSuccess, 
    error,
    handleRetry,
    handleOptimisticUpdate
  } = useQueryWithRetry({
    queryKey: ['eventsList', selectedGraphId],
    queryFn: async () => {
      if (!selectedGraphId) {
        return { data: [] }
      }
      return await EventService.getUpcomingEvents(selectedGraphId)
    },
    enabled: !!selectedGraphId,
    gcTime: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    staleTime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
  })

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
  const events = useMemo(() => allEvents?.data || [], [allEvents?.data])

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
  const filteredEvents = useMemo(() => {
    if (!debouncedSearchQuery.trim()) {
      return events
    }

    const query = debouncedSearchQuery.toLowerCase().trim()
    return events.filter((event: EventItem) => 
      event?.name?.toLowerCase().includes(query)
    )
  }, [events, debouncedSearchQuery])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
  const handleDelete = useCallback((eventId: string) => {
    handleOptimisticUpdate((old: any) => {
      if (!old?.data) return old
      
      return {
        ...old,
        data: old.data.filter((event: EventItem) => event._id !== eventId)
      }
    })
  }, [handleOptimisticUpdate])

  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const hasError = !!error
  const isEmpty = events.length === 0 && !isLoading
  const noSearchResults = debouncedSearchQuery && filteredEvents.length === 0

  // –†–µ–Ω–¥–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
  if (hasError) {
    return (
      <div className={styles.error}>
        <div className={styles.errorIcon}>‚ö†Ô∏è</div>
        <div className={styles.errorText}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>
        <button 
          className={styles.retryButton} 
          onClick={handleRetry}
        >
          –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
        </button>
      </div>
    )
  }

  if (isEmpty) {
    return (
      <EmptyState
        message="–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
        subMessage="–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è"
        emoji="üìÖ"
      />
    )
  }

  if (noSearchResults) {
    return (
      <EmptyState
        message="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        subMessage="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞"
        emoji="üîç"
      />
    )
  }

  return (
    <div className={styles.container}>
      {/* –†–µ–∫–ª–∞–º–∞ */}
      <div className={styles.adBanner}>
        <AdBanner />
      </div>

      {/* –ó–∞–≥—Ä—É–∑–∫–∞ */}
      {isLoading && (
        <div className={styles.loader}>
          <SpinnerLoader />
        </div>
      )}

      {/* –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π */}
      {isSuccess && (
        <div className={styles.eventsList}>
          {filteredEvents.map((event: EventItem, index: number) => (
            <div 
              key={event._id} 
              className={styles.eventCard}
              style={{ 
                '--delay': `${Math.min(index * 0.05, 0.5)}s`
              } as React.CSSProperties}
            >
              <EventCard 
                event={event} 
                isAttended={event.isAttended} 
                onDelete={handleDelete}
              />
            </div>
          ))}
        </div>
      )}
    </div>
  )
}
