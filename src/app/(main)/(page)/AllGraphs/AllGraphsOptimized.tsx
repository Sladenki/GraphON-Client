import React from 'react';
import { SpinnerLoader } from '@/components/global/SpinnerLoader/SpinnerLoader';
import { EmptyState } from '@/components/global/EmptyState/EmptyState';

import GraphsList from './GraphsList/GraphsList';
import styles from './AllGraphs.module.scss';
import { useAllGraphsOptimization } from './useAllGraphsOptimized';
import { useSearchQuery, useSelectedGraphId } from '@/stores/useUIStore';

interface AllGraphsProps {
  // –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã props, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º Zustand
}

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
const LoadingComponent = React.memo(() => (
  <div className={styles.loaderWrapper}>
    <SpinnerLoader />
  </div>
));
LoadingComponent.displayName = 'LoadingComponent';

const NoSearchResultsComponent = React.memo(() => (
  <EmptyState
    message="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    subMessage="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã"
    emoji="üîç"
  />
));
NoSearchResultsComponent.displayName = 'NoSearchResultsComponent';

const ErrorComponent = React.memo<{ onRetry: () => void }>(({ onRetry }) => (
  <div className={styles.error}>
    <div className={styles.errorIcon}>‚ö†Ô∏è</div>
    <div className={styles.errorText}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>
    <button className={styles.retryButton} onClick={onRetry}>
      –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
    </button>
  </div>
));
ErrorComponent.displayName = 'ErrorComponent';

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –≥—Ä–∞—Ñ–æ–≤
const GraphsListWrapper = React.memo<{ graphs: any[] }>(({ graphs }) => (
  <div className={styles.graphsListWrapper}>
    <GraphsList allGraphs={graphs} />
  </div>
));
GraphsListWrapper.displayName = 'GraphsListWrapper';

export const AllGraphsOptimized: React.FC<AllGraphsProps> = React.memo(() => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Zustand store
  const searchQuery = useSearchQuery();
  const selectedGraphId = useSelectedGraphId();
  
  const { 
    filteredGraphs, 
    allGraphs, 
    handleRetry, 
    loadingState, 
    loaderRef 
  } = useAllGraphsOptimization({ 
    searchQuery, 
    selectedGraphId: selectedGraphId || '' 
  });

  // Early returns –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
  if (loadingState.hasError) {
    return <ErrorComponent onRetry={handleRetry} />;
  }

  if (loadingState.noSearchResults) {
    return <NoSearchResultsComponent />;
  }

  return (
    <div className={styles.postsList}>
      {loadingState.isLoading && <LoadingComponent />}
      
      {loadingState.hasData && (
        <GraphsListWrapper graphs={filteredGraphs} />
      )}
      
      <div ref={loaderRef} />
    </div>
  );
});

AllGraphsOptimized.displayName = 'AllGraphsOptimized'; 