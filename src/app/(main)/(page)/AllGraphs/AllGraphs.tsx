import { FC, useMemo, useCallback, useEffect } from 'react';
import { SpinnerLoader } from '@/components/global/SpinnerLoader/SpinnerLoader';
import { useFetchBunchData } from '@/hooks/useFetchBunchData';
import styles from './AllGraphs.module.scss';
import GraphsList from '@/app/(main)/(page)/AllGraphs/GraphsList/GraphsList';
import { useQueryClient } from '@tanstack/react-query';
import { EmptyState } from '@/components/global/EmptyState/EmptyState';

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const filterCache = new Map<string, any[]>();

interface AllGraphsProps {
  searchQuery: string;
  selectedGraphId: string;
}

export const AllGraphs: FC<AllGraphsProps> = ({ searchQuery, selectedGraphId }) => {
  const queryClient = useQueryClient();
  
  // –ö—ç—à–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é React Query
  const { 
    allPosts: allGraphs, 
    isPostsFetching, 
    isEndPosts, 
    loaderRef, 
    error 
  } = useFetchBunchData(
    `graph/getAllChildrenGraphs/${selectedGraphId}`,
    [],
    true
  );

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const filteredGraphs = useMemo(() => {
    const cacheKey = `${selectedGraphId}-${searchQuery}`;
    
    if (filterCache.has(cacheKey)) {
      return filterCache.get(cacheKey) || [];
    }

    const filtered = !searchQuery 
      ? allGraphs 
      : allGraphs.filter((graph) =>
          graph.name.toLowerCase().includes(searchQuery.toLowerCase())
        );

    filterCache.set(cacheKey, filtered);
    return filtered;
  }, [allGraphs, searchQuery, selectedGraphId]);

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ selectedGraphId
  useEffect(() => {
    return () => {
      filterCache.clear();
    };
  }, [selectedGraphId]);

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const renderEmptyState = useCallback((message: string, subMessage: string, emoji: string = 'üéâ') => (
    <EmptyState
      message={message}
      subMessage={subMessage}
      emoji={emoji}
    />
  ), []);

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –æ—à–∏–±–∫–∏
  const renderError = useCallback(() => (
    <div className={styles.error}>
      <div className={styles.errorIcon}>‚ö†Ô∏è</div>
      <div className={styles.errorText}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>
      <button 
        className={styles.retryButton}
        onClick={() => queryClient.invalidateQueries({ queryKey: ['graph', selectedGraphId] })}
      >
        –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
      </button>
    </div>
  ), [queryClient, selectedGraphId]);

  if (error) {
    return renderError();
  }

  if (filteredGraphs.length === 0 && searchQuery) {
    return renderEmptyState(
      '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã',
      'üîç'
    );
  }

  return (
    <div className={styles.postsList}>
      {isPostsFetching && !isEndPosts && (
        <div className={styles.loaderWrapper}>
          <SpinnerLoader />
        </div>
      )}
      
      {allGraphs.length > 0 && (
        <div className={styles.graphsListWrapper}>
          <GraphsList 
            allGraphs={filteredGraphs} 
          />
        </div>
      )}
      <div ref={loaderRef} />
    </div>
  );
}; 