import { EventItem } from '@/types/schedule.interface';
import { useQuery, useQueryClient } from '@tanstack/react-query';
import React, { useEffect, useState, useCallback, useMemo } from 'react';
import styles from './Subs.module.scss'
import EventCard from '@/components/ui/EventCard/EventCard';
import { AxiosResponse } from 'axios';
import { SpinnerLoader } from '@/components/global/SpinnerLoader/SpinnerLoader';
import { EmptyState } from '@/components/global/EmptyState/EmptyState';
import { GraphSubsService } from '@/services/graphSubs.service';


// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
const filterCache = new Map<string, EventItem[]>();

const Subs = React.memo(({ searchQuery }: { searchQuery: string}) => {
  const queryClient = useQueryClient();
  const [isFirstLoad, setIsFirstLoad] = useState(true);

  const { data: allEvents, isLoading, isSuccess } = useQuery<AxiosResponse<any>>({
    queryKey: ['subsEvents'],
    queryFn: () => GraphSubsService.getSubsEvents(),
    gcTime: 10 * 60 * 1000, // 10 –º–∏–Ω—É—Ç
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
  });
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
  useEffect(() => {
    if (isSuccess || (!isLoading && allEvents)) {
      setIsFirstLoad(false);
    }
  }, [isLoading, isSuccess, allEvents]);

  const events = allEvents?.data || [];

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
  const filteredEvents = useMemo(() => {
    const cacheKey = `subs-${searchQuery}`;

    if (filterCache.has(cacheKey)) {
      return filterCache.get(cacheKey)!;
    }

    const filtered = events.filter((event: EventItem) => {
    if (!event?._id || !event?.name) return false;
    return event.name.toLowerCase().includes(searchQuery.toLowerCase());
  });

    filterCache.set(cacheKey, filtered);
    return filtered;
  }, [events, searchQuery]);

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      filterCache.clear();
    };
  }, []);

  const handleDelete = useCallback((eventId: string) => {
    queryClient.setQueryData(['subsEvents'], (old: AxiosResponse<any> | undefined) => {
      if (!old) return old;
      const newData = {
        ...old,
        data: {
          ...old.data,
          data: old.data.data.filter((event: EventItem) => event._id !== eventId)
        }
      };
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
      filterCache.clear();
      return newData;
    });
  }, [queryClient]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è
  const renderEventCard = useCallback((event: EventItem) => (
    <div key={event._id} className={styles.eventCardWrapper}>
      <EventCard 
        event={event} 
        isAttended={event.isAttended} 
        onDelete={handleDelete}
      />
    </div>
  ), [handleDelete]);

  // –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä –ø—É—Å—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const renderEmptyState = useCallback((message: string, subMessage: string, emoji: string = 'üéâ') => (
    <EmptyState
      message={message}
      subMessage={subMessage}
      emoji={emoji}
    />
  ), []);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
  if (isFirstLoad || (isLoading && !allEvents)) {
    return <SpinnerLoader />;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  if (!isLoading && searchQuery && filteredEvents.length === 0) {
    return renderEmptyState(
      '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è',
      'üîç'
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  if (!isFirstLoad && events.length === 0 && !isLoading) {
    return renderEmptyState(
      '–ü–æ–∫–∞ —á—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç',
      '–ù–æ —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫—Ä—É—Ç—ã–µ —Å–æ–±—ã—Ç–∏—è',
      'üéâ'
    );
  }

  return (
    <div className={styles.eventsListWrapper}>
      {filteredEvents.map(renderEventCard)}
    </div>
  );
});

Subs.displayName = 'Subs';

export default Subs;
