import React from 'react';
import styles from './Subs.module.scss';
import EventCard from '@/components/ui/EventCard/EventCard';
import { SpinnerLoader } from '@/components/global/SpinnerLoader/SpinnerLoader';
import { EmptyState } from '@/components/global/EmptyState/EmptyState';
import { EventItem } from '@/types/schedule.interface';
import { useSubsOptimization } from './useSubsOptimization';
import VirtualizedEventsList from '../EventsList/VirtualizedEventsList';

interface SubsProps {
  searchQuery: string;
}

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
const LoadingComponent = React.memo(() => (
  <div className={styles.loaderWrapper}>
    <SpinnerLoader />
  </div>
));
LoadingComponent.displayName = 'LoadingComponent';

const NoSearchResultsComponent = React.memo(() => (
  <EmptyState
    message="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
    subMessage="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
    emoji="üîç"
  />
));
NoSearchResultsComponent.displayName = 'NoSearchResultsComponent';

const EmptyEventsComponent = React.memo(() => (
  <EmptyState
    message="–ü–æ–∫–∞ —á—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç"
    subMessage="–ù–æ —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫—Ä—É—Ç—ã–µ —Å–æ–±—ã—Ç–∏—è"
    emoji="üéâ"
  />
));
EmptyEventsComponent.displayName = 'EmptyEventsComponent';

const ErrorComponent = React.memo<{ onRetry: () => void }>(({ onRetry }) => (
  <div className={styles.error}>
    <div className={styles.errorIcon}>‚ö†Ô∏è</div>
    <div className={styles.errorText}>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>
    <button className={styles.retryButton} onClick={onRetry}>
      –ü–æ–≤—Ç–æ—Ä–∏—Ç—å
    </button>
  </div>
));
ErrorComponent.displayName = 'ErrorComponent';

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è
const EventCardWrapper = React.memo<{
  event: EventItem;
  onDelete: (eventId: string) => void;
}>(({ event, onDelete }) => (
  <div className={styles.eventCardWrapper}>
    <EventCard 
      event={event} 
      isAttended={event.isAttended} 
      onDelete={onDelete}
    />
  </div>
));
EventCardWrapper.displayName = 'EventCardWrapper';

// –ú–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
const EventsList = React.memo<{
  events: EventItem[];
  onDelete: (eventId: string) => void;
}>(({ events, onDelete }) => (
  <div className={styles.eventsListWrapper}>
    {events.map((event) => (
      <EventCardWrapper
        key={event._id}
        event={event}
        onDelete={onDelete}
      />
    ))}
  </div>
));
EventsList.displayName = 'EventsList';

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Subs
const Subs: React.FC<SubsProps> = React.memo(({ searchQuery }) => {
  const {
    filteredEvents,
    handleDelete,
    handleRetry,
    loadingState,
    error
  } = useSubsOptimization({ searchQuery });

  // Early returns –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
  if (loadingState.hasError) {
    return <ErrorComponent onRetry={handleRetry} />;
  }

  if (loadingState.isFirstLoad || loadingState.isLoading) {
    return <LoadingComponent />;
  }

  if (loadingState.noSearchResults) {
    return <NoSearchResultsComponent />;
  }

  if (loadingState.isEmpty) {
    return <EmptyEventsComponent />;
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏—Ä—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤
  return (
    <VirtualizedEventsList 
      events={filteredEvents} 
      onDelete={handleDelete}
      itemHeight={420} // –í—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ–±—ã—Ç–∏—è + –æ—Ç—Å—Ç—É–ø—ã
      containerHeight={typeof window !== 'undefined' ? window.innerHeight - 200 : 600}
    />
  );
});

Subs.displayName = 'Subs';

export default Subs;
