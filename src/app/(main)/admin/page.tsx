'use client'

import { GraphService } from '@/services/graph.service';
import { useQuery } from '@tanstack/react-query';
import React from 'react'
import styles from './admin.module.scss'
import { SpinnerLoader } from '@/components/global/SpinnerLoader/SpinnerLoader';
import { useAuth } from '@/providers/AuthProvider';
import { UserRole, IUser } from '@/types/user.interface';
import { UserRoleManager } from '@/components/admin/UserRoleManager/UserRoleManager';
import { CreateGraphForm } from '@/components/admin/CreateGraphForm/CreateGraphForm';
import { CreateEventForm } from '@/components/admin/CreateEventForm/CreateEventForm';
import { CreateScheduleForm } from '@/components/admin/CreateScheduleForm/CreateScheduleForm';
import { TransferGraphOwnershipForm } from '@/components/admin/TransferGraphOwnershipForm/TransferGraphOwnershipForm';
import { useRoleAccess } from '@/hooks/useRoleAccess';
import { AdminSection } from '@/components/admin/AdminSection/AdminSection';
import { UserStats } from '@/components/admin/UserStats/UserStats';
import { ServerStats } from '@/components/admin/ServerStats/ServerStats';
import { CreateGlobalGraphForm } from '@/components/admin/CreateGlobalGraphForm/CreateGlobalGraphForm';
import { CreateTopicGraphForm } from '@/components/admin/CreateTopicGraphForm/CreateTopicGraphForm';
import { GetWeeklySchedule } from '@/components/admin/GetWeeklySchedule/GetWeeklySchedule';
import { useSelectedGraphId } from '@/stores/useUIStore';

const Admin = () => {
    const { user } = useAuth();
    const typedUser = user as IUser | null;
    const { canAccessCreate, canAccessEditor, canAccessSysAdmin, canAccessAdmin } = useRoleAccess(typedUser?.role);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–∏—Ö –≥—Ä–∞—Ñ–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞
    const selectedGraphId = useSelectedGraphId();
    const { isPending, isError, data: mainTopics, error } = useQuery({
        queryKey: ['graph/getAllChildrenGraphs', selectedGraphId],
        queryFn: () => GraphService.getAllChildrenGraphs(selectedGraphId as string),
        enabled: Boolean(selectedGraphId),
    });

    if (isPending) return <SpinnerLoader/>;
    if (isError) return <p>–û—à–∏–±–∫–∞: {error.message}</p>;

    return (
        <div className={styles.createPostWrapper}>
            {canAccessCreate && (
                <AdminSection 
                    title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
                    emoji="üìä"
                    role={UserRole.Create}
                >
                    <UserStats />
                </AdminSection>
            )}

            {canAccessCreate && (
                <AdminSection 
                    title="–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞"
                    emoji="üåç"
                    role={UserRole.Create}
                >
                    <CreateGlobalGraphForm />
                </AdminSection>
            )}

            {canAccessCreate && mainTopics && (
                <AdminSection 
                    title="–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞-—Ç–µ–º–∞—Ç–∏–∫–∏"
                    emoji="üìë"
                    role={UserRole.Create}
                >
                    <CreateTopicGraphForm />
                </AdminSection>
            )}
            
            {canAccessCreate && mainTopics && (
                <AdminSection 
                    title="–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞"
                    emoji="üìä"
                    role={UserRole.Create}
                >
                    <CreateGraphForm />
                </AdminSection>
            )}

            {(typedUser?.role === UserRole.SysAdmin || typedUser?.role === UserRole.Create) && (
                <AdminSection 
                    title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"
                    emoji="üñ•Ô∏è"
                    role={UserRole.SysAdmin}
                >
                    <ServerStats />
                </AdminSection>
            )}

            {canAccessAdmin && (
                <AdminSection 
                    title="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                    emoji="üë•"
                    role={UserRole.Admin}
                >
                    <UserRoleManager />
                </AdminSection>
            )}

            {canAccessAdmin && mainTopics && (
                <AdminSection 
                    title="–ü–µ—Ä–µ–¥–∞—á–∞ –ø—Ä–∞–≤ –Ω–∞ –≥—Ä–∞—Ñ"
                    emoji="üîë"
                    role={UserRole.Admin}
                >
                    <TransferGraphOwnershipForm graphs={mainTopics.data} />
                </AdminSection>
            )}
   
            {canAccessEditor && mainTopics && (
                <AdminSection 
                    title="–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
                    emoji="üìÖ"
                    role={UserRole.Editor}
                >
                    <CreateEventForm globalGraphId={user?.selectedGraphId || ''} />
                </AdminSection>
            )}
            
            {canAccessEditor && mainTopics && (
                <AdminSection 
                    title="–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
                    emoji="‚è∞"
                    role={UserRole.Editor}
                >
                    <CreateScheduleForm globalGraphId={user?.selectedGraphId || ''} />
                </AdminSection>
            )}

            {canAccessEditor && (
                <AdminSection 
                    title="–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –í–£–ó—É"
                    emoji="üìÜ"
                    role={UserRole.Editor}
                >
                    <GetWeeklySchedule />
                </AdminSection>
            )}
        </div>
    );
};

export default Admin;


