'use client'

import React, { useState, useCallback } from 'react'
import { SpinnerLoader } from '@/components/global/SpinnerLoader/SpinnerLoader'
import { EmptyState } from '@/components/global/EmptyState/EmptyState'
import { ErrorState } from '@/components/global/ErrorState/ErrorState'

import SchedulePopUp from '@/components/ui/SchedulePopUp/SchedulePopUp'
import SearchBar, { SearchTag } from '@/components/ui/SearchBar/SearchBar'
import { useFetchBunchData } from '@/hooks/useFetchBunchData'
import { useSearchWithTags } from '@/hooks/useSearchWithTags'
import { useSelectedGraphId } from '@/stores/useUIStore'
import { IGraphList } from '@/types/graph.interface'
import styles from './GroupsList.module.scss'
import GraphBlock from '@/components/ui/GraphBlock/GraphBlock'

export default function GroupsList() {
  const selectedGraphId = useSelectedGraphId()
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è PopUp
  const [isScheduleOpen, setIsScheduleOpen] = useState(false)
  const [popupGraphId, setPopupGraphId] = useState<string | null>(null)

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const { 
    allPosts: allGraphs, 
    isPostsFetching, 
    isEndPosts, 
    loaderRef, 
    error 
  } = useFetchBunchData(
    `graph/getAllChildrenGraphs/${selectedGraphId}`,
    [],
    true
  )

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø (–∏–∑ parentGraphId.name)
  const availableTags: SearchTag[] = React.useMemo(() => {
    const tagMap = new Map<string, SearchTag>()
    
    allGraphs.forEach((graph: IGraphList) => {
      const parentGraph = (graph as any).parentGraphId
      if (parentGraph && typeof parentGraph === 'object' && parentGraph.name) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ –∫–ª—é—á –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        const tagKey = parentGraph.name.toLowerCase().trim()
        const tagId = parentGraph._id || parentGraph.name.toLowerCase().replace(/\s+/g, '_')
        tagMap.set(tagKey, { _id: tagId, name: parentGraph.name })
      }
    })
    
    const tags = Array.from(tagMap.values()).sort((a, b) => a.name.localeCompare(b.name))
    console.log('Available tags:', tags)
    console.log('Total groups processed:', allGraphs.length)
    console.log('Unique parentGraph names found:', tagMap.size)
    return tags
  }, [allGraphs])

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö—É–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  const {
    query,
    selectedTags,
    filteredData: filteredGraphs,
    hasActiveFilters,
    setQuery,
    setSelectedTags,
    clearFilters
  } = useSearchWithTags({
    data: allGraphs,
    searchFields: ['name', 'about'],
    tagField: 'parentGraphId',
    tagIdField: '_id',
    tagNameField: 'name'
  })

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ PopUp
  const handleScheduleClick = useCallback((id: string) => {
    setPopupGraphId(id)
    setIsScheduleOpen(true)
  }, [])

  const closeSchedule = useCallback(() => setIsScheduleOpen(false), [])

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞
  const handleSearch = useCallback((searchQuery: string) => {
    setQuery(searchQuery)
  }, [setQuery])

  const handleTagFilter = useCallback((tagIds: string[]) => {
    setSelectedTags(tagIds)
  }, [setSelectedTags])

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
  const isLoading = isPostsFetching && !isEndPosts
  const hasData = allGraphs.length > 0
  const hasError = !!error
  const noSearchResults = hasActiveFilters && filteredGraphs.length === 0

  // –†–µ–Ω–¥–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π
  if (hasError) {
    return (
      <ErrorState
        message="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
        subMessage="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø"
        onRetry={() => window.location.reload()}
      />
    )
  }

  // –£–±–∏—Ä–∞–µ–º —Ä–∞–Ω–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç –¥–ª—è noSearchResults - –ø–æ–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤–∏–¥–∏–º—ã–º

  return (
    <div className={styles.container}>
      {/* –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã - –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º—ã–π */}
      <div className={styles.searchSection}>
          <SearchBar
            onSearch={handleSearch}
            onTagFilter={handleTagFilter}
            placeholder="–ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø..."
            availableTags={availableTags}
            showTagFilter={true}
            initialQuery={query}
            initialSelectedTags={selectedTags}
          />
          
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö */}
          {hasActiveFilters && (
            <div className={styles.searchResults}>
              –ù–∞–π–¥–µ–Ω–æ: {filteredGraphs.length} –∏–∑ {allGraphs.length} –≥—Ä—É–ø–ø
            </div>
          )}
        </div>
 

      {/* –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
      {isLoading && (
        <div className={styles.loader}>
          <SpinnerLoader />
        </div>
      )}
      
      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º EmptyState –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ */}
      {noSearchResults && (
        <div className={styles.emptyStateWrapper}>
          <EmptyState
            message="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            subMessage="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞"
            emoji="üîç"
          />
        </div>
      )}
      
      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ—Ç–∫—É –≥—Ä—É–ø–ø –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –µ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
      {hasData && !noSearchResults && (
        <div className={styles.grid}>
          {filteredGraphs.map((graph: IGraphList) => (
            <div key={graph._id} className={styles.graphItem}>
              <GraphBlock
                id={graph._id}
                name={graph.name}
                isSubToGraph={graph.isSubscribed}
                imgPath={graph.imgPath}
                about={graph.about}
                handleScheduleButtonClick={() => handleScheduleClick(graph._id)}
              />
            </div>
          ))}
        </div>
      )}

      {/* PopUp –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã */}
      {isScheduleOpen && popupGraphId && (
        <SchedulePopUp 
          graphId={popupGraphId} 
          isSchedulePopupOpen={isScheduleOpen} 
          closeSchedulePopup={closeSchedule} 
        />
      )}

      <div ref={loaderRef} />
    </div>
  )
}
