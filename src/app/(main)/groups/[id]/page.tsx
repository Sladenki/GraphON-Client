'use client'

import React from 'react'
import { useParams, useRouter } from 'next/navigation'
import { useQuery } from '@tanstack/react-query'
import { GraphService } from '@/services/graph.service'
import { SpinnerLoader } from '@/components/global/SpinnerLoader/SpinnerLoader'
import { EmptyState } from '@/components/global/EmptyState/EmptyState'
import { Button, Card, CardHeader, CardBody, Chip, Divider } from '@heroui/react'
import { ArrowLeft, Calendar, Heart, HeartCrack, Users, MapPin } from 'lucide-react'
import Image from 'next/image'
import { useAuth } from '@/providers/AuthProvider'
import { useSubscription } from '@/hooks/useSubscriptionGraph'
import { notifyInfo, notifySuccess } from '@/lib/notifications'
import styles from './GraphPage.module.scss'

const BASE_S3_URL = process.env.NEXT_PUBLIC_S3_URL

export default function GraphPage() {
  const params = useParams()
  const router = useRouter()
  const graphId = params.id as string
  const { isLoggedIn } = useAuth()

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∞
  const { data: graph, isLoading, error } = useQuery({
    queryKey: ['graph', graphId],
    queryFn: async () => {
      const response = await GraphService.getGraphById(graphId)
      return response
    },
    enabled: !!graphId,
  })
  const { isSubscribed, toggleSubscription, isLoading: isSubscribing } = useSubscription(
    graph?.isSubscribed ?? false,
    graphId
  )

  const handleSubscription = () => {
    toggleSubscription()
    if (!isSubscribed) {
      notifySuccess(
        '–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≥—Ä–∞—Ñ',
        '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –≤–∞—à–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏'
      )
    } else {
      notifyInfo('–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≥—Ä–∞—Ñ–∞')
    }
  }

  const fullImageUrl = graph?.imgPath ? `${BASE_S3_URL}/${graph.imgPath}` : ''

  if (isLoading) {
    return (
      <div className={styles.loader}>
        <SpinnerLoader />
      </div>
    )
  }

  if (error || !graph) {
    return (
      <div className={styles.error}>
        <EmptyState
          message="–ì—Ä–∞—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω"
          subMessage="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥—Ä–∞—Ñ"
          emoji="üîç"
        />
        <Button
          color="primary"
          variant="flat"
          startContent={<ArrowLeft size={18} />}
          onPress={() => router.back()}
          className={styles.backButton}
        >
          –ù–∞–∑–∞–¥
        </Button>
      </div>
    )
  }

  return (
    <div className={styles.container}>
      {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ */}
      <Button
        color="default"
        variant="light"
        startContent={<ArrowLeft size={18} />}
        onPress={() => router.back()}
        className={styles.backButton}
      >
        –ù–∞–∑–∞–¥ –∫ –≥—Ä—É–ø–ø–∞–º
      </Button>

      {/* –ö–∞—Ä—Ç–æ—á–∫–∞ –≥—Ä–∞—Ñ–∞ */}
      <Card className={styles.graphCard}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º */}
        <CardHeader className={styles.cardHeader}>
          <div className={styles.imageSection}>
            {fullImageUrl ? (
              <Image
                src={fullImageUrl}
                alt={graph.name}
                width={600}
                height={400}
                className={styles.graphImage}
                priority
              />
            ) : (
              <div className={styles.placeholderImage}>
                <div className={styles.placeholderIcon}>üì∑</div>
              </div>
            )}
          </div>

          <div className={styles.headerContent}>
            <div className={styles.titleSection}>
              <h1 className={styles.title}>{graph.name}</h1>
              
              {graph.parentGraphId && (
                <Chip
                  variant="flat"
                  size="sm"
                  startContent={<Users size={14} />}
                  className={styles.parentChip}
                >
                  {graph.parentGraphId.name}
                </Chip>
              )}
            </div>

            {isLoggedIn && (
              <Button
                color={isSubscribed ? 'danger' : 'primary'}
                variant={isSubscribed ? 'flat' : 'solid'}
                startContent={
                  isSubscribed ? <HeartCrack size={18} /> : <Heart size={18} />
                }
                onPress={handleSubscription}
                isLoading={isSubscribing}
                className={styles.subscribeButton}
              >
                {isSubscribed ? '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è' : '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è'}
              </Button>
            )}
          </div>
        </CardHeader>

        <Divider />

        {/* –¢–µ–ª–æ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
        <CardBody className={styles.cardBody}>
          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <div className={styles.section}>
            <h2 className={styles.sectionTitle}>–û –≥—Ä—É–ø–ø–µ</h2>
            <p className={styles.description}>
              {graph.about || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
            </p>
          </div>

          <Divider className={styles.divider} />

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className={styles.section}>
            <h2 className={styles.sectionTitle}>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
            
            <div className={styles.infoGrid}>
              {graph.ownerUserId && typeof graph.ownerUserId === 'object' && (
                <div className={styles.infoItem}>
                  <Users size={18} className={styles.infoIcon} />
                  <span className={styles.infoLabel}>–í–ª–∞–¥–µ–ª–µ—Ü:</span>
                  <span className={styles.infoValue}>
                    {graph.ownerUserId.username || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                  </span>
                </div>
              )}

              {graph.parentGraphId && (
                <div className={styles.infoItem}>
                  <MapPin size={18} className={styles.infoIcon} />
                  <span className={styles.infoLabel}>–†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –≥—Ä—É–ø–ø–∞:</span>
                  <span className={styles.infoValue}>
                    {graph.parentGraphId.name}
                  </span>
                </div>
              )}

              <div className={styles.infoItem}>
                <Calendar size={18} className={styles.infoIcon} />
                <span className={styles.infoLabel}>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</span>
                <Button
                  size="sm"
                  variant="flat"
                  color="primary"
                  onPress={() => {
                    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                    router.push(`/schedule/?graphId=${graphId}`)
                  }}
                >
                  –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                </Button>
              </div>
            </div>
          </div>
        </CardBody>
      </Card>
    </div>
  )
}
