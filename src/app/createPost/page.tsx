'use client'

import UploadForm from '@/components/ui/UploadForm/UploadForm';
import { GraphService } from '@/services/graph.service';
import { PostService } from '@/services/post.service';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { useRouter } from 'next/navigation';
import React, { useState } from 'react'
import styles from './createPage.module.scss'
import { SpinnerLoader } from '@/components/ui/SpinnerLoader/SpinnerLoader';
import SelectGraph from './SelectGraph/SelectGraph';
import ButtonActive from '@/components/ui/ButtonActive/ButtonActive';
import { WarningText } from '@/components/ui/WarningText/WarningText';


const EmojiPicker = React.lazy(() => import('./EmojiPicker/EmojiPicker'));

const CreatePost = () => {
    const { push } = useRouter();

    const [content, setContent] = useState('');
    const [imgPath, setImgPath] = useState<File | null>(null);
    const [emoji, setEmoji] = useState(''); // –ü–æ–ª–µ –¥–ª—è —ç–º–æ–¥–∑–∏
    const [text, setText] = useState('');   // –ü–æ–ª–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    const [showEmojiPicker, setShowEmojiPicker] = useState(false); // –ü–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ —Å–∫—Ä—ã—Ç—å –≤—ã–±–æ—Ä —ç–º–æ–¥–∑–∏
    const [isLoading, setIsLoading] = useState(false); // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞

    const [selectedGraph, setSelectedGraph] = useState('');

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤
    const { isPending, isError, data: mainTopics, error } = useQuery({
        queryKey: ['graph/getParentGraphs'],
        queryFn: () => GraphService.getParentGraphs(),
    });

    if (isPending) return <SpinnerLoader/>;
    if (isError) return <p>–û—à–∏–±–∫–∞: {error.message}</p>;

    const handleImageChange = (file: File) => setImgPath(file);

    const handleSubmit = async () => {
        if (isLoading) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ª–∏ –ø–æ–ª—è
        if (!content.trim() || !selectedGraph) {
            alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É.");
            return; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        }

        setIsLoading(true);

        const formData = new FormData();
        formData.append('content', content);
        if (imgPath) formData.append('imgPath', imgPath);

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç reaction –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ formData
        const reaction = {
            emoji,
            text,
        };

        formData.append('reaction', JSON.stringify(reaction)); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        // @ts-expect-error 123
        formData.append('selectedGraph', selectedGraph._id); 

        try {
            const response = await PostService.createPost(formData);

            if (response.status === 200) {
                push('/');
                setContent('');
                setImgPath(null);
                setEmoji('');
                setText('');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞:', error);
        } finally {
            setIsLoading(false); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏
    const handleEmojiClick = (selectedEmoji: string) => {
        setEmoji(selectedEmoji); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —ç–º–æ–¥–∑–∏ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        setShowEmojiPicker(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏
    };

  return (
    <div className={styles.createPostWrapper}>
        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä–∞—Ñ */}
        {!selectedGraph && (
            <span className={styles.warningText}>
                ‚ö†Ô∏è –ü–æ–∂–∞–ª—É–∏ÃÜ—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –∏–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            </span>
        )}

        {/* –ü–æ–∏—Å–∫ –ø–æ –≥—Ä–∞—Ñ–∞–º + –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∞ + –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤ */}
        {mainTopics && (
            <SelectGraph
                mainTopics={mainTopics.data}
                selectedGraph={selectedGraph}
                setSelectedGraph={setSelectedGraph}
            />
        )}

        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å—é –∏–Ω—Ñ—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥—Ä–∞—Ñ–∞ */}
        {selectedGraph && (
            <>
                <textarea
                    id="textField"
                    className={styles.textarea}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞..."
                    maxLength={500}
                    onChange={(e) => setContent(e.target.value)}
                    value={content}
                />
                <span className={styles.countLetters}>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å—Ç–∞: {content.length} / 500</span>

                <UploadForm handleImageChange={handleImageChange} />

                <div className={styles.emojiContainer}>
                    <div className={styles.reactionContainer}>
                        <input
                            type="text"
                            maxLength={1}
                            placeholder="üëç"
                            value={emoji}
                            onFocus={() => setShowEmojiPicker(true)}
                            onChange={(e) => setEmoji(e.target.value)}
                            className={styles.emojiInput}
                        />

                        {showEmojiPicker && (
                            <div className={styles.emojiPicker}>
                                <EmojiPicker onEmojiClick={handleEmojiClick} />
                            </div>
                        )}

                        <input
                            type="text"
                            maxLength={10}
                            placeholder="–¢–µ–∫—Å—Ç —Ä–µ–∞–∫—Ü–∏–∏"
                            value={text}
                            onChange={(e) => setText(e.target.value)}
                            className={styles.reactionInput}
                        />
        
                    </div>

                    <span className={styles.countLetters}>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ —Ä–µ–∞–∫—Ü–∏–∏: {text.length} / 10</span>

                </div>

                <div className={styles.buttonSubmit}>
                    <ButtonActive
                        text="–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç"
                        onClick={handleSubmit}
                        isLoading={isLoading}
                    />
                </div>

  
            </>
        )}

      
    </div>
  );
};

export default CreatePost;


