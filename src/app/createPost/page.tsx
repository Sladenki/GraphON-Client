'use client'

import UploadForm from '@/components/ui/UploadForm/UploadForm';
import { GraphService } from '@/services/graph.service';
import { PostService } from '@/services/post.service';
import { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';
import { useRouter } from 'next/navigation';
import React, { useState } from 'react'
import SelectTopics from './SelectTopics/SelectTopics';
import EmojiPicker from './EmojiPicker/EmojiPicker';
import styles from './createPage.module.scss'
import { SpinnerLoader } from '@/components/ui/SpinnerLoader/SpinnerLoader';

const CreatePost = () => {
    const { push } = useRouter();

    const [content, setContent] = useState('');
    const [imgPath, setImgPath] = useState<File | null>(null);
    const [emoji, setEmoji] = useState(''); // –ü–æ–ª–µ –¥–ª—è —ç–º–æ–¥–∑–∏
    const [text, setText] = useState('');   // –ü–æ–ª–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    const [showEmojiPicker, setShowEmojiPicker] = useState(false); // –ü–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ —Å–∫—Ä—ã—Ç—å –≤—ã–±–æ—Ä —ç–º–æ–¥–∑–∏

    const [selectedTopic, setSelectedTopic] = useState('');

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤
    const { isPending, isError, data: mainTopics, error } = useQuery({
        queryKey: ['graph/getParentGraphs'],
        queryFn: () => GraphService.getParentGraphs(),
    });

    if (isPending) return <SpinnerLoader/>;
    if (isError) return <p>–û—à–∏–±–∫–∞: {error.message}</p>;

    const handleImageChange = (file: File) => setImgPath(file);

    const handleSubmit = async () => {
        const formData = new FormData();
        formData.append('content', content);
        if (imgPath) formData.append('imgPath', imgPath);

        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç reaction –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ formData
        const reaction = {
            emoji,
            text,
        };

        formData.append('reaction', JSON.stringify(reaction)); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        // @ts-expect-error 123
        formData.append('selectedTopic', selectedTopic._id); 

        try {
            const response = await PostService.createPost(formData);

            if (response.status === 200) {
                push('/');
                setContent('');
                setImgPath(null);
                setEmoji('');
                setText('');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞:', error);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏
    const handleEmojiClick = (selectedEmoji: string) => {
        setEmoji(selectedEmoji); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —ç–º–æ–¥–∑–∏ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        setShowEmojiPicker(false); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —ç–º–æ–¥–∑–∏
    };

  return (
    <div className={styles.createPostWrapper}>
        {/* –ü–æ–∏—Å–∫ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –≥—Ä–∞—Ñ–∞–º + –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∞ + –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä–∞—Ñ–æ–≤ */}
        {mainTopics && (
            <SelectTopics
                mainTopics={mainTopics.data}
                selectedTopic={selectedTopic}
                setSelectedTopic={setSelectedTopic}
            />
        )}

        <textarea
            id="textField"
            className={styles.textarea}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞..."
            maxLength={800}
            onChange={(e) => setContent(e.target.value)}
            value={content}
        />
        <span>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {content.length} / 800</span>

        <UploadForm handleImageChange={handleImageChange} />

        <div className={styles.emojiContainer}>
            <input
                type="text"
                maxLength={1}
                placeholder="üòä"
                value={emoji}
                onFocus={() => setShowEmojiPicker(true)}
                onChange={(e) => setEmoji(e.target.value)}
                className={styles.emojiInput}
            />

            {showEmojiPicker && (
                <div className={styles.emojiPicker}>
                <EmojiPicker onEmojiClick={handleEmojiClick} />
                </div>
            )}

            <input
                type="text"
                maxLength={10}
                placeholder="–¢–µ–∫—Å—Ç —Ä–µ–∞–∫—Ü–∏–∏"
                value={text}
                onChange={(e) => setText(e.target.value)}
                className={styles.reactionInput}
            />
        </div>

        <button className={styles.createButton} onClick={handleSubmit}>
            –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç
        </button>
    </div>
  );
};

export default CreatePost;


